@(require racket/string racket/system racket/port)

@(define shaded-modes (map string->symbol (string-split (or (getenv "SHADED_MODES") ""))))
@(define all-modes (append modes (map string->symbol (string-split (or (getenv "DEFAULT_MODES") "")))))

@defcommand{ignore}{body}{}
@defcommand{error}{body}{}

@(define (version)
   (define vername (string->symbol (get-arg)))
   (define body (get-arg))
   (let ([is-shaded (member vername shaded-modes)])
        (if (member vername all-modes)
         (list 
               (if is-shaded "\\begin{shaded}" "")
               body
               (if is-shaded "\\end{shaded}" "")
               )
         (list))))

@defcommand{oopdisplay}{^text}{@scala{^text}}
@defcommand{oop}{^text}{@codeinline{scala}{^text}}
@defcommand{oopcode}{^text}{@code{scala}{^text}}
@(define (pygmentize . args)
    (apply subprocess (append `(#f #f #f ,(find-executable-path "pygmentize")) args)))
@(define (code)
    (let ([lang (get-arg)] [text (get-arg*)])
        (let-values ([(proc stdout stdin stderr) (pygmentize "-f" "latex" "-l" lang)])
            (display text stdin)
            (flush-output stdin)
            (close-output-port stdin)
            (string-replace (port->string stdout) "@" "@@"))))
@defcommand{codeinline}{^lang ^text}{\begingroup\RecustomVerbatimEnvironment{Verbatim}{BVerbatim}{}@code{^lang}{^text}\endgroup@(if (regexp-try-match #rx"^[ \t\r\n]" (stdin)) "~" " ")}
@(define (includecode/lang)
    (let ([lang (get-arg)] [filename (get-arg)])
        (let-values ([(proc stdout stdin stderr) (pygmentize "-f" "latex" "-l" lang filename)])
            (string-replace (port->string stdout) "@" "@@"))))
@(define (includecode)
    (let ( [filename (get-arg)])
        (let-values ([(proc stdout stdin stderr) (pygmentize "-f" "latex" filename)])
            (string-replace (port->string stdout) "@" "@@"))))
% include a java or scala file with the package declaration removed
@(define (package-trim)
  (let ([input-port (open-input-file (get-arg))])
    (string-trim
      (string-replace (port->string input-port) "@" "@@")
      #px"package (.*?)(\n)[\\s]*(?=[^\\s])|[\\s]*")))
%% Java Definitions
@defcommand{java}{^text}{@code{java}{^text}}
@defcommand{javainclude}{^file}{@includecode/lang{java}{^file}}
@defcommand{javainline}{^text}{@codeinline{java}{^text}}
@defcommand{javasolution}{^name}{@version{sol}{@includecode/lang{java}{^name}}}
@defcommand{javaapi}{^text}{\href{http://docs.oracle.com/javase/7/docs/api/^text.html}{^text}}
@version{java} {
  @defcommand{langnotes}{^path}{
    @localnotes{java/^path}
  }
  @defcommand{langsol}{^path}{
    @version{sol}{@java{@package-trim{java/^path.java}}}
  }
  @defcommand{langsrc}{^path}{
    @java{@package-trim{java/^path.java}}
  }
}
%% Scala Definitions
@defcommand{scala}{^text}{@code{scala}{^text}}
@defcommand{scalainline}{^text}{@codeinline{scala}{^text}}
@defcommand{scalainclude}{^file}{@includecode/lang{scala}{^file}}
@defcommand{scalasolution}{^name}{@version{sol}{@includecode/lang{scala}{^name}}}
@version{scala} {
  @defcommand{langnotes}{^path}{
    @localnotes{scala/^path}
  }
  @defcommand{langsol}{^path}{
    @version{sol}{@scala{@package-trim{scala/^path.scala}}}
  }
  @defcommand{langsrc}{^path}{
    @scala{@package-trim{scala/^path.scala}}
  }
}
%% Scheme Definitions
@defcommand{scheme}{^text}{@code{scheme}{^text}}
@defcommand{schemedisplay}{^text}{@env{schemedisplay}{^text}}
@defcommand{schemeinline}{^text}{@codeinline{scheme}{^text}}
@defcommand{schemesolution}{^name}{@version{sol}{@includecode/lang{scheme}{^name}}}
@defcommand{schemeinclude}{^file}{@includecode/lang{scheme}{^file}}
%% OCaml Definitions
@defcommand{ocaml}{^text}{@code{ocaml}{^text}}
@defcommand{smallocaml}{^text}{@ocamlinline{^text}}
@defcommand{ocamlinline}{^text}{@codeinline{ocaml}{^text}}
@defcommand{ocamlslatexstart}{}{\setkeyword{exception fun match then try with in let module open rec type val :: end sig struct}}
@defcommand{ocamlslatexend}{}{\setvariable{exception fun match then try with in let module open rec type val :: end sig struct}}
@defcommand{ocamldisplay}{^text}{@ocamlslatexstart{}\begin{schemedisplay}^text\end{schemedisplay}@ocamlslatexend{}}
@defcommand{ocamlsolution}{^name}{@version{sol}{@includecode/lang{ocaml}{^name}}}
@defcommand{ocamlinclude}{^file}{@includecode/lang{ocaml}{^file}}
%% Shell Definitions
@defcommand{shell}{^text}{@code{bash}{^text}}
@defcommand{shellinline}{^text}{@codeinline{bash}{^text}}
@defcommand{shellinclude}{^file}{@includecode/lang{bash}{^file}}
@defcommand{shellsolution}{^name}{@version{sol}{\begin{lstlisting}
@include{^name}\end{lstlisting}}}
%% Golang Definitions
@defcommand{golang}{^text}{@code{go}{^text}}
@defcommand{golanginline}{^text}{@codeinline{go}{^text}}
@defcommand{golanginclude}{^file}{@includecode/lang{go}{^file}}
@defcommand{golangsolution}{^name}{@version{sol}{@includecode/lang{go}{^name}}}

@defcommand{href}{^site ^text}{\href{^site}{^text}\footnote{\url{^site}}}


@defcommand{env}{^envname ^body}{\begin{^envname}
^body
\end{^envname}}

@(define (repeat)
   (define (help n datum)
     (cond ((zero? n) '())
           (else (cons datum (help (sub1 n) datum)))))
   (help (string->number (get-arg)) (get-arg)))

% vim: ft=scheme

